## 内存结构概述

![内存结构概述.svg](https://note-java.oss-cn-beijing.aliyuncs.com/img/1614739024976-cb89fa31-32e8-4d92-bc5b-ac9e7eef53fc.svg)





![第02章_JVM架构-英.jpg](https://note-java.oss-cn-beijing.aliyuncs.com/img/1617685165520-15c6ae9a-5258-4a23-a952-b6a6bfe7f5cb.jpeg)

![第02章_JVM架构-中.jpg](https://note-java.oss-cn-beijing.aliyuncs.com/img/1617685188567-e777a7d9-4c83-4b0f-83c0-7197436aabb8.jpeg)

注意：方法区只有HotSpot虚拟机有，J9，JRockit都没有

如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？

- 类加载器
- 执行引擎

## 类加载器子系统作用

![img](https://note-java.oss-cn-beijing.aliyuncs.com/img/1614697962919-f6450f66-b8c1-46ff-8aa5-061572693d90.png)

- 类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。



- ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。



- 加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）

------

## 类加载器ClassLoader角色

![img](https://note-java.oss-cn-beijing.aliyuncs.com/img/1614698041073-de10cbcd-f87a-416d-9d94-8715c702e815.png)

- class file（在下图中就是Car.class文件）存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。

- class file加载到JVM中，被称为DNA元数据模板（在下图中就是内存中的Car Class），放在方法区。

- 在.class文件–>JVM–>最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色

## 类的加载过程

```
public class HelloLoader {

    public static void main(String[] args) {
        System.out.println("谢谢ClassLoader加载我....");
        System.out.println("你的大恩大德，我下辈子再报！");
    }
}
```

![img](https://note-java.oss-cn-beijing.aliyuncs.com/img/1614699520402-9a8d0411-e747-49c3-9a85-88d9391d507a.png)

- 执行 main() 方法（静态方法）就需要先加载main方法所在类 HelloLoader
- 加载成功，则进行链接、初始化等操作。完成后调用 HelloLoader 类中的静态方法 main

- 加载失败则抛出异常

### 加载阶段

**加载**

1. 通过一个类的全限定名获取定义此类的二进制字节流
2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构

1. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口

**加载class文件的方式：**

- 从本地系统中直接加载
- 通过网络获取，典型场景：Web Applet

- 从zip压缩包中读取，成为日后jar、war格式的基础
- 运行时计算生成，使用最多的是：动态代理技术

- 由其他文件生成，典型场景：JSP应用从专有数据库中提取.class文件，比较少见
- 从加密文件中获取，典型的防Class文件被反编译的保护措施

### 链接阶段

链接分为三个子阶段：验证 -> 准备 -> 解析

#### 验证(Verify)

- 目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全
- 主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证。

**举例**

使用 BinaryViewer软件查看字节码文件，其开头均为 CAFE BABE ，如果出现不合法的字节码文件，那么将会验证不通过。

![img](https://note-java.oss-cn-beijing.aliyuncs.com/img/1614932801748-6312f257-b94e-4ffd-9dc5-05762700241e.png)

#### [准备(Prepare)](https://youthlql.gitee.io/javayouth/#/docs/Java/JVM/JVM系列-第2章-类加载子系统?id=准备prepare)

- 为类变量（static变量）分配内存并且设置该类变量的默认初始值，即零值
- 这里不包含用final修饰的static，因为final在编译的时候就会分配好了默认值，准备阶段会显式初始化

- 注意：这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中

**举例**

代码：变量a在准备阶段会赋初始值，但不是1，而是0，在初始化阶段会被赋值为

```java
public class HelloApp {
    private static int a = 1;//prepare：a = 0 ---> initial : a = 1


    public static void main(String[] args) {
        System.out.println(a);
    }
}
```

#### 解析(Resolve)

1. 将常量池内的符号引用转换为直接引用的过程
2. 事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行

1. 符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄
2. 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT Class info、CONSTANT Fieldref info、CONSTANT Methodref info等

### 初始化

**clinit()**

1. 初始化阶段就是执行类构造器方法`<clinit>()`的过程
2. 此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。也就是说，当我们代码中包含static变量的时候，就会有clinit方法

1. `<clinit>()`方法中的指令按语句在源文件中出现的顺序执行
2. `<clinit>()`不同于类的构造器。（关联：构造器是虚拟机视角下的`<init>()`）

1. 若该类具有父类，JVM会保证子类的`<clinit>()`执行前，父类的`<clinit>()`已经执行完毕
2. 虚拟机必须保证一个类的`<clinit>()`方法在多线程下被同步加锁

- **有类变量（static变量）加载**`**<clinit>()**`

```java
public class ClassInitTest {
    private static int num = 1;
    static {
        number = 20;
        num = 2;
        System.out.println(num);
        //System.out.println(number);//非法的前向引用

    }
    private static int number = 10;//linking的prepare：number = 0 → initial：20 → 10
    public static void main(String[] args) {
        System.out.println(ClassInitTest.num);//2
        System.out.println(number);//10
    }
}
```

- **先加载父类**

```java
public class ClassInitTest2 {
    static class Father {
        public static int A = 1;

        static {
            A = 2;
        }
    }
    static class Son extends Father {
        public static int B = A;
    }

    public static void main(String[] args) {
        System.out.println(Son.B);
    }
}
```

- 同步加锁

```java
public class DeadThreadTest {
    public static void main(String[] args) {
        Runnable r = () -> {
            System.out.println(Thread.currentThread().getName() + "开始");
            DeadThread dead = new DeadThread();
            System.out.println(Thread.currentThread().getName() + "结束");
        };

        Thread t1 = new Thread(r,"线程1");
        Thread t2 = new Thread(r,"线程2");

        t1.start();
        t2.start();
    }
}

class DeadThread{
    static{
        if(true){
            System.out.println(Thread.currentThread().getName() + "初始化当前类");
            while(true){

            }
        }
    }
}
线程2开始
线程1开始
线程2初始化当前类

/然后程序卡死了
```